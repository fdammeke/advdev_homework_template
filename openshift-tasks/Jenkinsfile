#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}-${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"
        // TBD: Execute Maven Build
        sh("${mvnCmd} clean install -DskipTests=true")
      }

      // TBD: The next two stages should run in parallel
      stage('Run Tests') {
        parallel (
          'Unit Tests': {
          // Using Maven run the unit tests
            stage('Unit Tests') {
              echo "Running Unit Tests"
              // TBD: Execute Unit Tests
              sh("${mvnCmd} test")
            }
          },
          'Code Analysis': {
          // Using Maven to call SonarQube for Code Analysis
            stage('Code Analysis') {
              echo "Running Code Analysis"
              // TBD: Execute Sonarqube Tests
              sh("${mvnCmd} sonar:sonar -DskipTests=true -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000")
            }
          }
        )
      }
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        // TBD: Publish to Nexus
         sh("${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases")
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // TBD: Build Image, tag Image
        dir('target') {
          sh("oc start-build tasks --from-dir=. --follow -n ${GUID}-tasks-dev")
        }
        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-dev") {
              openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        sh("oc set image dc/tasks tasks=${GUID}-tasks-dev/tasks:${devTag} --source=imagestreamtag -n ${GUID}-tasks-dev")
        sh("oc set env dc/tasks VERSION='${devTag} (tasks-dev)' -n ${GUID}-tasks-dev")

        sh("oc rollout latest dc/tasks -n ${GUID}-tasks-dev")
        //      Make sure the application is running and ready before proceeding
        script {
         openshift.withCluster() {
           openshift.withProject("${GUID}-tasks-dev") {
             def dc = openshift.selector("dc", "tasks").object()
             def dc_version = dc.status.latestVersion
             def rc = openshift.selector("rc", "tasks-${dc_version}").object()
             echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
             while (rc.spec.replicas != rc.status.readyReplicas) {
               echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
               sleep 5
               rc = openshift.selector("rc", "tasks-${dc_version}").object()
             }
           }
         }
       }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry
        sh("skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=openshift:\$(oc whoami -t) --dest-creds=admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${prodTag}")

        // TBD: Tag the built image with the production tag.
        sh("oc tag tasks:latest tasks:${prodTag} -n ${GUID}-tasks-dev")

      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        script {
          echo "Get active service"
          activeApp = sh(
            returnStdout: true,
            script: "oc get route tasks -n ${GUID}-tasks-prod -o jsonpath='{ .spec.to.name }'"
            ).trim()

            if ( activeApp == 'tasks-green' ) {
              destApp = 'tasks-blue'
            }

            echo "Deploying ${destApp}"
            sh("oc rollout pause dc/${destApp} -n ${GUID}-tasks-prod")
            sh("oc set image dc/${destApp} ${destApp}=docker-registry.default.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${prodTag} --source=docker -n ${GUID}-tasks-prod")
            sh("oc set env dc/${destApp} VERSION='${prodTag} (${destApp})' -n ${GUID}-tasks-prod")
            sh("oc rollout resume dc/${destApp} -n ${GUID}-tasks-prod")

            openshiftDeploy depCfg: destApp, namespace: "${GUID}-tasks-prod", verbose: 'false', waitTime: '', waitUnit: 'sec'
            openshift.withCluster() {
                openshift.withProject("${GUID}-tasks-prod") {
                  timeout(10) {
                    def latestDeploymentVersion = openshift.selector("dc","${destApp}").object().status.latestVersion
                    def rc = openshift.selector("rc", "${destApp}-${latestDeploymentVersion}")
                    rc.untilEach(1){
                      def rcMap = it.object()
                      return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                    }
                  }
                }
            }
            openshiftVerifyService namespace: "${GUID}-tasks-prod", svcName: destApp, verbose: 'false'
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
